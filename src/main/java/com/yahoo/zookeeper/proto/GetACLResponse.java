// File generated by hadoop record compiler. Do not edit.
package com.yahoo.zookeeper.proto;

import com.yahoo.jute.*;
public class GetACLResponse implements Record {
  private java.util.ArrayList acl;
  private com.yahoo.zookeeper.data.Stat stat;
  public GetACLResponse() {
  }
  public GetACLResponse(
        java.util.ArrayList acl,
        com.yahoo.zookeeper.data.Stat stat) {
    this.acl=acl;
    this.stat=stat;
  }
  public java.util.ArrayList getAcl() {
    return acl;
  }
  public void setAcl(java.util.ArrayList m_) {
    acl=m_;
  }
  public com.yahoo.zookeeper.data.Stat getStat() {
    return stat;
  }
  public void setStat(com.yahoo.zookeeper.data.Stat m_) {
    stat=m_;
  }
  public void serialize(OutputArchive a_, String tag) throws java.io.IOException {
    a_.startRecord(this,tag);
    {
      a_.startVector(acl,"acl");
      if (acl!= null) {          int len1 = acl.size();
          for(int vidx1 = 0; vidx1<len1; vidx1++) {
            com.yahoo.zookeeper.data.ACL e1 = (com.yahoo.zookeeper.data.ACL) acl.get(vidx1);
    a_.writeRecord(e1,"e1");
          }
      }
      a_.endVector(acl,"acl");
    }
    a_.writeRecord(stat,"stat");
    a_.endRecord(this,tag);
  }
  public void deserialize(InputArchive a_, String tag) throws java.io.IOException {
    a_.startRecord(tag);
    {
      Index vidx1 = a_.startVector("acl");
      if (vidx1!= null) {          acl=new java.util.ArrayList();
          for (; !vidx1.done(); vidx1.incr()) {
    com.yahoo.zookeeper.data.ACL e1;
    e1= new com.yahoo.zookeeper.data.ACL();
    a_.readRecord(e1,"e1");
            acl.add(e1);
          }
      }
    a_.endVector("acl");
    }
    stat= new com.yahoo.zookeeper.data.Stat();
    a_.readRecord(stat,"stat");
    a_.endRecord(tag);
}
  public String toString() {
    try {
      java.io.ByteArrayOutputStream s =
        new java.io.ByteArrayOutputStream();
      CsvOutputArchive a_ = 
        new CsvOutputArchive(s);
      a_.startRecord(this,"");
    {
      a_.startVector(acl,"acl");
      if (acl!= null) {          int len1 = acl.size();
          for(int vidx1 = 0; vidx1<len1; vidx1++) {
            com.yahoo.zookeeper.data.ACL e1 = (com.yahoo.zookeeper.data.ACL) acl.get(vidx1);
    a_.writeRecord(e1,"e1");
          }
      }
      a_.endVector(acl,"acl");
    }
    a_.writeRecord(stat,"stat");
      a_.endRecord(this,"");
      return new String(s.toByteArray(), "UTF-8");
    } catch (Throwable ex) {
      ex.printStackTrace();
    }
    return "ERROR";
  }
  public void write(java.io.DataOutput out) throws java.io.IOException {
    BinaryOutputArchive archive = new BinaryOutputArchive(out);
    serialize(archive, "");
  }
  public void readFields(java.io.DataInput in) throws java.io.IOException {
    BinaryInputArchive archive = new BinaryInputArchive(in);
    deserialize(archive, "");
  }
  public int compareTo (Object peer_) throws ClassCastException {
    if (!(peer_ instanceof GetACLResponse)) {
      throw new ClassCastException("Comparing different types of records.");
    }
    GetACLResponse peer = (GetACLResponse) peer_;
    int ret = 0;
    if (ret != 0) return ret;
    ret = stat.compareTo(peer.stat);
    if (ret != 0) return ret;
     return ret;
  }
  public boolean equals(Object peer_) {
    if (!(peer_ instanceof GetACLResponse)) {
      return false;
    }
    if (peer_ == this) {
      return true;
    }
    GetACLResponse peer = (GetACLResponse) peer_;
    boolean ret = false;
    ret = acl.equals(peer.acl);
    if (!ret) return ret;
    ret = stat.equals(peer.stat);
    if (!ret) return ret;
     return ret;
  }
  public int hashCode() {
    int result = 17;
    int ret;
    ret = acl.hashCode();
    result = 37*result + ret;
    ret = stat.hashCode();
    result = 37*result + ret;
    return result;
  }
  public static String signature() {
    return "LGetACLResponse([LACL(iLId(ss))]LStat(lllliiil))";
  }
}
