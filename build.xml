<project name="ZooKeeper" default="jar">

    <property name="Name" value="ZooKeeper" />
    <property name="name" value="zookeeper" />
    <property name="version" value="0.1-dev" />
    <property name="year" value="2007" />

    <property name="src.dir" value="${basedir}/java/src" />
    <property name="build.dir" value="${basedir}/build" />
    <property name="src_generated.dir" value="${build.dir}/java/generated" />
    <property name="build.classes" value="${build.dir}/classes" />
    <property name="config.dir" value="${basedir}/test/config" />
    <property name="build.docs" value="${build.dir}/docs" />
    <property name="build.javadoc" value="${build.docs}/api" />

    <property name="build.testclasses" value="${build.dir}/testclasses"/>
    <property name="test.build.dir" value="${build.dir}/test" />
    <property name="test.src.dir" value="${basedir}/test"/>
    <property name="test.log.dir" value="${test.build.dir}/logs" />
    <property name="test.tmp.dir" value="${test.build.dir}/tmp" />
    <property name="test.output" value="no" />
    <property name="jar.name" value="zookeeper.jar" />
    <property name="test.timeout" value="900000" />
    <property name="test.junit.output.format" value="plain" />

    <property name="javadoc.link.java" value="http://java.sun.com/j2se/1.5/docs/api/" />
    <property name="javadoc.packages" value="com.yahoo.*" />

    <!-- ====================================================== -->
    <!-- Generate and compile the Java files                    -->
    <!-- ====================================================== -->
    <target name="jute">
        <mkdir dir="${build.classes}" />
        <javac srcdir="${src.dir}" destdir="${build.classes}" target="1.5" source="1.5" includes="com/yahoo/jute/**" debug="on">
        </javac>
    </target>

    <target name="compile_jute" depends="jute">
        <mkdir dir="${build.classes}" />
        <mkdir dir="${src_generated.dir}" />
        <java classname="com.yahoo.jute.compiler.generated.Rcc" fork="true" dir="${src_generated.dir}">
            <arg value="../../../zookeeper.jute" />
            <classpath>
                <pathelement path="${build.classes}" />
            </classpath>
        </java>
        <javac srcdir="${src_generated.dir}" destdir="${build.classes}" target="1.5" source="1.5" debug="on">
        </javac>
    </target>

    <target name="compile" depends="compile_jute">
        <mkdir dir="${build.classes}" />
        <javac srcdir="${src.dir}" destdir="${build.classes}" target="1.5" source="1.5" debug="on">
            <classpath>
                <fileset dir="${build.classes}" />
            </classpath>
        </javac>
        <copy todir="${build.classes}">
         <fileset
            dir="${src.dir}"
         />
         </copy>
    </target>

    <target name="compile-test" depends="jar">
      <mkdir dir="${build.testclasses}"/>
      <javac srcdir="${test.src.dir}" destdir="${build.testclasses}" target="1.5" source="1.5" debug="on">
         <classpath>
           <fileset dir="${basedir}">
              <include name="*.jar"/>
           </fileset>
         </classpath>
         <classpath>
           <fileset dir="${basedir}/java/lib">
             <include name="*.jar"/>
           </fileset>
         </classpath>
      </javac>
    </target>

    <!-- ====================================================== -->
    <!-- Documentation                                          -->
    <!-- ====================================================== -->
    <target name="javadoc" depends="jar">
        <mkdir dir="${build.javadoc}" />
        <javadoc packagenames="com.yahoo.*" destdir="${build.javadoc}" author="true" version="true" use="true" windowtitle="${Name} ${version} API" doctitle="${Name} ${version} API" bottom="Copyright &amp;copy; ${year} Yahoo Inc.">
            <packageset dir="${src.dir}" />
            <link href="${javadoc.link.java}" />
        </javadoc>
    </target>

    <!-- ====================================================== -->
    <!-- Make zookeeper.jar                                     -->
    <!-- ====================================================== -->
    <target name="jar" depends="compile">
        <jar jarfile="${jar.name}" basedir="${build.classes}"> 
            <manifest>
                <attribute name="Main-Class" value="com.yahoo.zookeeper.server.quorum.QuorumPeer" />
            </manifest>
        </jar>
    </target>

    <!-- ====================================================== -->
    <!-- Clean.  Delete the build files, and their directories  -->
    <!-- ====================================================== -->
    <target name="clean">
        <delete dir="${build.dir}" />
        <delete file="${jar.name}" />
    </target>

    <!-- ====================================================== -->
    <!-- Run unit tests                                         -->
    <!-- ====================================================== -->
    <target name="test" depends="jar, compile-test">
        <delete dir="${test.log.dir}" />
        <delete dir="${test.tmp.dir}" />
        <mkdir dir="${test.log.dir}" />
        <mkdir dir="${test.tmp.dir}" />
        <junit showoutput="${test.output}" printsummary="yes" haltonfailure="no" fork="yes" maxmemory="512m" dir="${basedir}" timeout="${test.timeout}" errorProperty="tests.failed" failureProperty="tests.failed">
            <sysproperty key="build.test.dir" value="${test.tmp.dir}" />
	    <classpath>
                <pathelement path="${build.testclasses}" />
            </classpath>
             <classpath>
               <fileset dir="${basedir}">
                 <include name="*.jar"/>
               </fileset>
            </classpath>

            <formatter type="${test.junit.output.format}" />
            <batchtest todir="${test.log.dir}" unless="testcase">
                <fileset dir="${test.src.dir}" includes="**/*Test.java" />
            </batchtest>
            <batchtest todir="${test.log.dir}" if="testcase">
                <fileset dir="${test.src.dir}" includes="**/${testcase}.java" />
            </batchtest>
        </junit>
        <fail if="tests.failed">Tests failed!</fail>
    </target>

    <!-- ====================================================== -->
    <!-- Run optional third-party tool targets                  -->
    <!-- ====================================================== -->

    <!-- Run with 'ant -Dfindbugs.home="path to Findbugs directory" findbugs -->
    <property name="findbugs.home" value="" />
    <target name="findbugs" depends="check-for-findbugs, jar" if="findbugs.present">
        <property name="findbugs.out.dir" value="${test.build.dir}/findbugs" />
        <property name="findbugs.exclude.file" value="${config.dir}/findbugsExcludeFile.xml" />
        <property name="findbugs.report.htmlfile" value="${findbugs.out.dir}/zookeeper-findbugs-report.html" />
        <property name="findbugs.report.xmlfile" value="${findbugs.out.dir}/zookeeper-findbugs-report.xml" />
        <taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask" classpath="${findbugs.home}/lib/findbugs-ant.jar" />
        <mkdir dir="${findbugs.out.dir}" />
        <findbugs home="${findbugs.home}" output="xml:withMessages" excludeFilter="${findbugs.exclude.file}" outputFile="${findbugs.report.xmlfile}" effort="max" jvmargs="-Xmx512M">
            <sourcePath path="${src.dir}" />
            <class location="${basedir}/zookeeper.jar" />
        </findbugs>
        <xslt style="${findbugs.home}/src/xsl/default.xsl" in="${findbugs.report.xmlfile}" out="${findbugs.report.htmlfile}" />
    </target>

    <target name="check-for-findbugs">
        <available property="findbugs.present" file="${findbugs.home}/lib/findbugs.jar" />
    </target>

</project>
